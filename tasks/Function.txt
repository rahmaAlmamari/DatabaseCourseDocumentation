
Declare @x int =100 -- if we declare varible we dont want to use DB becuase we are work on memory , EXEPT if the varible bring value from table here we should use DB


use iti

declare @x int =( select avg(st_age) from Student) -- if i run this it will show me problem we should run together 
select @x


select * from Instructor
select * from Student

Declare @f int
select @f = St_Age from Student where St_Id=3
select @f 
--------------------------------------------------------------------------------------------------------------------------

--if we assign 100 and the select statement did not return a result --> for example there is no student with number 15
-- it will take the last value that we assign which is 100

Declare @f int =100
select @f = St_Age from Student where St_Id=15
select @f

--if the select statement return array -->means number of values so the variable will take or save the last value in array 
--here is your problem--> you did not check select statment what it will return so for that you will prepare varibels to hold the values :( 
------------------------------------------------------------------------------------------------------------------------------------------
Declare @f int, @name varchar(20)
select @f = St_Age, St_Fname from Student where St_Id=900
select @f  -- this will lead me to error ! why ? becuase we use select for assign & display and this is not allowed (use for one purpose only )


--Check here 
--------------------------------------------------------------------------------------------------------------------------
Declare @f int, @name varchar(20)
select @f = St_Age,@name=St_Fname from Student where St_Id=3
select @f,@name
---------------------------------------------------------------------------------------------------------------------------
--here it will show me the last value in array or table 
Declare @f int
select  @f = St_Age from Student where St_Address ='alex'
select @f

-- table (x int) -->we should use one dimensional array of integer ( we make table on memory )--> it will end with the end of query 
-------------------------------------------------------------------------------------------------------------------------
Declare @t table(x int) --X is the name of the column 
insert into @t
select  St_Age from Student where St_Address ='alex' --insert based on select 
select * from @t
------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------
--2 Dimensional -->2 columns
Declare @t table(x int, n varchar(20))
insert into @t
select  St_Age, St_Fname from Student where St_Address ='alex'
select * from @t
-------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------
--Global Var-----

Select @@servername
select @@version

update Student set st_age+=1 -- this will show us message of how many rows affected 
select @@ROWCOUNT   --here will show us the result rather than the message 

update Student set st_age+=1
select @@ROWCOUNT
select @@ROWCOUNT -- it will show us 1 the last one of select @@ROWCOUNT


update Student set st_age+=1
go 
select @@error 

--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
--control of flow 
--if ( we can do if for the result of the query not query itself ) how ?
--begin end 
--while  continu break 



Declare @x int =90
If @x>0 --we can add and , OR more condition
Select 'x>0'
else 
Select 'x<0'

Declare @x int =90
If @x>0 
--{ --here we don’t have this we use instead (begin , end)
   begin
      Select 'x>0'
      end 
else -- use if-else (nested if )

Select 'x<0'

-------------------------------------------------------------------------------------
--- while  continue   break --عندناwhile نسوي فيها كل شي 
----------------------------------------------------------------------------
declare @x int=10
while @x<=20
	begin
		set @x+=1
		if @x=13
			continue
		if @x=15
			break
			select @x
	end


------------------------------------------------
--import & export data


select * from student 


--on the db (import & export)--source & destination





--bulk insert 
----1)try to use impot\export wizard to export data of sales 
----table to be delimited file and don't put columns names 
----in the first row of the file
----"Skipping headers isnot supported by BULK INSERT statement"
----2)in full recovery this statment is saved accourding 
----number f records but in bulk-logged this statment is 
----saved as one statment "performance with"
bulk insert sales
from 'D:\DB\sales.txt'
with (fieldterminator=',')
------------------------------
---------------------------------------------
--Function , scaler func 
-- in C# we write function like --> String getName(int id);
--be attention here its create not declear 
--تأخذ رقم الطالب وترجع اسمه
Create Function GetName(@id int) -- we can not pass parameter without using it (optinal to take , but it must return )
Returns varchar(20) -->return data type
Begin
Declare @name varchar(20) --if we write here 30 --> it will return 20 --> it will cut it 
Select @name=St_Fname from Student where St_Id=@id --لازم تستخدم البراميتر الي مررته 
Return @name --> return the value 
End 

---وين راحت ؟؟؟؟  
-------------------------------------------------------------------
alter Function GetName(@id int)   
Returns varchar(21) --> change here
Begin
Declare @name varchar(20) 
Select @name=St_Fname from student where St_Id=@id
Return @name 
End

select GetName(1)        --will think it as built in function (call of built in func is different than user define)



 
select dbo.GetName(1)    -- that is why we should write the name of schema 

drop function GetName

-->Function is like table its as object -->we can script and take it to other DB 
-----------------------------------------
---Return table 

--Inline --> function ارسل لها رقم القسم وتطلع لي المدرسين ورواتبهم   
--error why? as
Create function Getist(@did int)
returns table  --> its different from return --> type of return type  
	as
	return
	(
	
	 select ins_name,salary*12    --function as create table in runtime so it must be -->the name of column is clear      
	 from Instructor
	 where Dept_Id=@did	
	)

-------------------------------------------
Create function Getist(@did int)
returns table  --> its different from return --> type of return type  
	as
	return
	(
	 select ins_name,salary*12 as TotalSal
	 from Instructor
	 where Dept_Id=@did	
	)
	-- all functions --> we write inside the body only select , not DML, DDL ,TCL,DQL,Permission
--------------------------------------------------------- 
select dbo.Getist(20) --> error why ?    


--this is return table !

select * from Getist(20)      --> we dont have built in func return table 

-------------------------------------------------------------------------------------
--multistatment  -- return table or list  if we send first name --> return id with first name .....

create function GetStuds(@format varchar(20))
returns @t table  -- if we write return table this will be inline 
                  -- we should declear varible of type table 
			(
			 id int,
			 sname varchar(20) -- يكون داخله هذه الاشياء 
			)
   as --- till here is the signture of function
	begin
		if @format='first'
			insert into @t    --------------------------------------------->insert in ?
			select st_id,st_fname from Student
		else if @format='last'
			insert into @t
			select st_id,st_Lname from Student
		else if @format='fullname'
			insert into @t 
			select st_id,st_fname+' '+st_lname from Student
		return -- ما قدر احدد له --i cannot write @t becuase we dont know the option
	end

	drop function GetStuds

select * from getstuds('Fullname')

--no message + with table in result 
   
   ----------------------------------------------------
   --server 
     --db   --login
       -->user, schema
	            --object( table rule functions stored view)
	               -- column keys constrins index trigger
   